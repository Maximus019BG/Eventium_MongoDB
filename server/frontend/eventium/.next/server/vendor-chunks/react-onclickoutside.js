"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-onclickoutside";
exports.ids = ["vendor-chunks/react-onclickoutside"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/react-onclickoutside/dist/react-onclickoutside.es.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/react-onclickoutside/dist/react-onclickoutside.es.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IGNORE_CLASS_NAME: () => (/* binding */ IGNORE_CLASS_NAME),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n} /**\r\n * Check whether some DOM node is our Component's node.\r\n */ \nfunction isNodeFound(current, componentNode, ignoreClass) {\n    if (current === componentNode) {\n        return true;\n    } // SVG <use/> elements do not technically reside in the rendered DOM, so\n    // they do not have classList directly, but they offer a link to their\n    // corresponding element, which can have classList. This extra check is for\n    // that case.\n    // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement\n    // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17\n    if (current.correspondingElement) {\n        return current.correspondingElement.classList.contains(ignoreClass);\n    }\n    return current.classList.contains(ignoreClass);\n}\n/**\r\n * Try to find our node in a hierarchy of nodes, returning the document\r\n * node as highest node if our node is not found in the path up.\r\n */ function findHighest(current, componentNode, ignoreClass) {\n    if (current === componentNode) {\n        return true;\n    } // If source=local then this event came from 'somewhere'\n    // inside and should be ignored. We could handle this with\n    // a layered approach, too, but that requires going back to\n    // thinking in terms of Dom node nesting, running counter\n    // to React's 'you shouldn't care about the DOM' philosophy.\n    // Also cover shadowRoot node by checking current.host\n    while(current.parentNode || current.host){\n        // Only check normal node without shadowRoot\n        if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {\n            return true;\n        }\n        current = current.parentNode || current.host;\n    }\n    return current;\n}\n/**\r\n * Check if the browser scrollbar was clicked\r\n */ function clickedScrollbar(evt) {\n    return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;\n} // ideally will get replaced with external dep\n// when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in\nvar testPassiveEventSupport = function testPassiveEventSupport() {\n    if (true) {\n        return;\n    }\n    var passive = false;\n    var options = Object.defineProperty({}, \"passive\", {\n        get: function get() {\n            passive = true;\n        }\n    });\n    var noop = function noop() {};\n    window.addEventListener(\"testPassiveEventSupport\", noop, options);\n    window.removeEventListener(\"testPassiveEventSupport\", noop, options);\n    return passive;\n};\nfunction autoInc(seed) {\n    if (seed === void 0) {\n        seed = 0;\n    }\n    return function() {\n        return ++seed;\n    };\n}\nvar uid = autoInc();\nvar passiveEventSupport;\nvar handlersMap = {};\nvar enabledInstances = {};\nvar touchEvents = [\n    \"touchstart\",\n    \"touchmove\"\n];\nvar IGNORE_CLASS_NAME = \"ignore-react-onclickoutside\";\n/**\r\n * Options for addEventHandler and removeEventHandler\r\n */ function getEventHandlerOptions(instance, eventName) {\n    var handlerOptions = {};\n    var isTouchEvent = touchEvents.indexOf(eventName) !== -1;\n    if (isTouchEvent && passiveEventSupport) {\n        handlerOptions.passive = !instance.props.preventDefault;\n    }\n    return handlerOptions;\n}\n/**\r\n * This function generates the HOC function that you'll use\r\n * in order to impart onOutsideClick listening to an\r\n * arbitrary component. It gets called at the end of the\r\n * bootstrapping code to yield an instance of the\r\n * onClickOutsideHOC function defined inside setupHOC().\r\n */ function onClickOutsideHOC(WrappedComponent, config) {\n    var _class, _temp;\n    var componentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n    return _temp = _class = /*#__PURE__*/ function(_Component) {\n        _inheritsLoose(onClickOutside, _Component);\n        function onClickOutside(props) {\n            var _this;\n            _this = _Component.call(this, props) || this;\n            _this.__outsideClickHandler = function(event) {\n                if (typeof _this.__clickOutsideHandlerProp === \"function\") {\n                    _this.__clickOutsideHandlerProp(event);\n                    return;\n                }\n                var instance = _this.getInstance();\n                if (typeof instance.props.handleClickOutside === \"function\") {\n                    instance.props.handleClickOutside(event);\n                    return;\n                }\n                if (typeof instance.handleClickOutside === \"function\") {\n                    instance.handleClickOutside(event);\n                    return;\n                }\n                throw new Error(\"WrappedComponent: \" + componentName + \" lacks a handleClickOutside(event) function for processing outside click events.\");\n            };\n            _this.__getComponentNode = function() {\n                var instance = _this.getInstance();\n                if (config && typeof config.setClickOutsideRef === \"function\") {\n                    return config.setClickOutsideRef()(instance);\n                }\n                if (typeof instance.setClickOutsideRef === \"function\") {\n                    return instance.setClickOutsideRef();\n                }\n                return (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode)(instance);\n            };\n            _this.enableOnClickOutside = function() {\n                if (typeof document === \"undefined\" || enabledInstances[_this._uid]) {\n                    return;\n                }\n                if (typeof passiveEventSupport === \"undefined\") {\n                    passiveEventSupport = testPassiveEventSupport();\n                }\n                enabledInstances[_this._uid] = true;\n                var events = _this.props.eventTypes;\n                if (!events.forEach) {\n                    events = [\n                        events\n                    ];\n                }\n                handlersMap[_this._uid] = function(event) {\n                    if (_this.componentNode === null) return;\n                    if (_this.props.preventDefault) {\n                        event.preventDefault();\n                    }\n                    if (_this.props.stopPropagation) {\n                        event.stopPropagation();\n                    }\n                    if (_this.props.excludeScrollbar && clickedScrollbar(event)) return;\n                    var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;\n                    if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {\n                        return;\n                    }\n                    _this.__outsideClickHandler(event);\n                };\n                events.forEach(function(eventName) {\n                    document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized(_this), eventName));\n                });\n            };\n            _this.disableOnClickOutside = function() {\n                delete enabledInstances[_this._uid];\n                var fn = handlersMap[_this._uid];\n                if (fn && typeof document !== \"undefined\") {\n                    var events = _this.props.eventTypes;\n                    if (!events.forEach) {\n                        events = [\n                            events\n                        ];\n                    }\n                    events.forEach(function(eventName) {\n                        return document.removeEventListener(eventName, fn, getEventHandlerOptions(_assertThisInitialized(_this), eventName));\n                    });\n                    delete handlersMap[_this._uid];\n                }\n            };\n            _this.getRef = function(ref) {\n                return _this.instanceRef = ref;\n            };\n            _this._uid = uid();\n            return _this;\n        }\n        /**\r\n     * Access the WrappedComponent's instance.\r\n     */ var _proto = onClickOutside.prototype;\n        _proto.getInstance = function getInstance() {\n            if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {\n                return this;\n            }\n            var ref = this.instanceRef;\n            return ref.getInstance ? ref.getInstance() : ref;\n        };\n        /**\r\n     * Add click listeners to the current document,\r\n     * linked to this component's state.\r\n     */ _proto.componentDidMount = function componentDidMount() {\n            // If we are in an environment without a DOM such\n            // as shallow rendering or snapshots then we exit\n            // early to prevent any unhandled errors being thrown.\n            if (typeof document === \"undefined\" || !document.createElement) {\n                return;\n            }\n            var instance = this.getInstance();\n            if (config && typeof config.handleClickOutside === \"function\") {\n                this.__clickOutsideHandlerProp = config.handleClickOutside(instance);\n                if (typeof this.__clickOutsideHandlerProp !== \"function\") {\n                    throw new Error(\"WrappedComponent: \" + componentName + \" lacks a function for processing outside click events specified by the handleClickOutside config option.\");\n                }\n            }\n            this.componentNode = this.__getComponentNode(); // return early so we dont initiate onClickOutside\n            if (this.props.disableOnClickOutside) return;\n            this.enableOnClickOutside();\n        };\n        _proto.componentDidUpdate = function componentDidUpdate() {\n            this.componentNode = this.__getComponentNode();\n        } /**\r\n     * Remove all document's event listeners for this component\r\n     */ ;\n        _proto.componentWillUnmount = function componentWillUnmount() {\n            this.disableOnClickOutside();\n        } /**\r\n     * Can be called to explicitly enable event listening\r\n     * for clicks and touches outside of this element.\r\n     */ ;\n        /**\r\n     * Pass-through render\r\n     */ _proto.render = function render() {\n            // eslint-disable-next-line no-unused-vars\n            var _this$props = this.props;\n            _this$props.excludeScrollbar;\n            var props = _objectWithoutPropertiesLoose(_this$props, [\n                \"excludeScrollbar\"\n            ]);\n            if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {\n                props.ref = this.getRef;\n            } else {\n                props.wrappedRef = this.getRef;\n            }\n            props.disableOnClickOutside = this.disableOnClickOutside;\n            props.enableOnClickOutside = this.enableOnClickOutside;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(WrappedComponent, props);\n        };\n        return onClickOutside;\n    }(react__WEBPACK_IMPORTED_MODULE_0__.Component), _class.displayName = \"OnClickOutside(\" + componentName + \")\", _class.defaultProps = {\n        eventTypes: [\n            \"mousedown\",\n            \"touchstart\"\n        ],\n        excludeScrollbar: config && config.excludeScrollbar || false,\n        outsideClickIgnoreClass: IGNORE_CLASS_NAME,\n        preventDefault: false,\n        stopPropagation: false\n    }, _class.getClass = function() {\n        return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;\n    }, _temp;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (onClickOutsideHOC);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/react-onclickoutside/dist/react-onclickoutside.es.js\n");

/***/ })

};
;